// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package databasesqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserDb = `-- name: CreateUserDb :one
INSERT INTO users (
        id,
        first_name,
        last_name,
        full_name,
        email,
        password,
        job_title,
        is_deleted,
        create_date,
        update_date
    )
VALUES (
        gen_random_uuid(),
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        false,
        now(),
        now()
    )
RETURNING id,
    first_name,
    last_name,
    full_name,
    email,
    job_title,
    is_deleted,
    create_date,
    update_date
`

type CreateUserDbParams struct {
	FirstName string      `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	FullName  pgtype.Text `json:"full_name"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	JobTitle  pgtype.Text `json:"job_title"`
}

type CreateUserDbRow struct {
	ID         uuid.UUID          `json:"id"`
	FirstName  string             `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	FullName   pgtype.Text        `json:"full_name"`
	Email      string             `json:"email"`
	JobTitle   pgtype.Text        `json:"job_title"`
	IsDeleted  pgtype.Bool        `json:"is_deleted"`
	CreateDate pgtype.Timestamptz `json:"create_date"`
	UpdateDate pgtype.Timestamptz `json:"update_date"`
}

func (q *Queries) CreateUserDb(ctx context.Context, arg CreateUserDbParams) (CreateUserDbRow, error) {
	row := q.db.QueryRow(ctx, createUserDb,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.JobTitle,
	)
	var i CreateUserDbRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.JobTitle,
		&i.IsDeleted,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const deleteUserDb = `-- name: DeleteUserDb :one
UPDATE users
SET is_deleted = true,
    update_date = now()
WHERE id = $1
RETURNING id,
    first_name,
    last_name,
    full_name,
    email,
    job_title,
    is_deleted,
    create_date,
    update_date
`

type DeleteUserDbRow struct {
	ID         uuid.UUID          `json:"id"`
	FirstName  string             `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	FullName   pgtype.Text        `json:"full_name"`
	Email      string             `json:"email"`
	JobTitle   pgtype.Text        `json:"job_title"`
	IsDeleted  pgtype.Bool        `json:"is_deleted"`
	CreateDate pgtype.Timestamptz `json:"create_date"`
	UpdateDate pgtype.Timestamptz `json:"update_date"`
}

func (q *Queries) DeleteUserDb(ctx context.Context, id uuid.UUID) (DeleteUserDbRow, error) {
	row := q.db.QueryRow(ctx, deleteUserDb, id)
	var i DeleteUserDbRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.JobTitle,
		&i.IsDeleted,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const editPassword = `-- name: EditPassword :exec
UPDATE users
SET password = $1,
    update_date = now()
WHERE id = $2
`

type EditPasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) EditPassword(ctx context.Context, arg EditPasswordParams) error {
	_, err := q.db.Exec(ctx, editPassword, arg.Password, arg.ID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, full_name, email, password, job_title, is_deleted, create_date, update_date
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.JobTitle,
		&i.IsDeleted,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const getUserByIdDb = `-- name: GetUserByIdDb :one
SELECT id,
    first_name,
    last_name,
    full_name,
    email,
    password,
    job_title,
    is_deleted,
    create_date,
    update_date
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByIdDb(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIdDb, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.JobTitle,
		&i.IsDeleted,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const getUserIdByEmail = `-- name: GetUserIdByEmail :one
SELECT id
FROM users
WHERE email = $1
`

func (q *Queries) GetUserIdByEmail(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserIdByEmail, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUsersDb = `-- name: GetUsersDb :many
SELECT id,
    first_name,
    last_name,
    full_name,
    email,
    job_title,
    is_deleted,
    create_date,
    update_date
FROM users
`

type GetUsersDbRow struct {
	ID         uuid.UUID          `json:"id"`
	FirstName  string             `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	FullName   pgtype.Text        `json:"full_name"`
	Email      string             `json:"email"`
	JobTitle   pgtype.Text        `json:"job_title"`
	IsDeleted  pgtype.Bool        `json:"is_deleted"`
	CreateDate pgtype.Timestamptz `json:"create_date"`
	UpdateDate pgtype.Timestamptz `json:"update_date"`
}

func (q *Queries) GetUsersDb(ctx context.Context) ([]GetUsersDbRow, error) {
	rows, err := q.db.Query(ctx, getUsersDb)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersDbRow{}
	for rows.Next() {
		var i GetUsersDbRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Email,
			&i.JobTitle,
			&i.IsDeleted,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET first_name = $1,
    last_name = $2,
    full_name = $3,
    email = $4,
    job_title = $5,
    update_date = now()
WHERE id = $6
RETURNING id,
    first_name,
    last_name,
    full_name,
    email,
    job_title,
    is_deleted,
    create_date,
    update_date
`

type UpdateUserParams struct {
	FirstName string      `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	FullName  pgtype.Text `json:"full_name"`
	Email     string      `json:"email"`
	JobTitle  pgtype.Text `json:"job_title"`
	ID        uuid.UUID   `json:"id"`
}

type UpdateUserRow struct {
	ID         uuid.UUID          `json:"id"`
	FirstName  string             `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	FullName   pgtype.Text        `json:"full_name"`
	Email      string             `json:"email"`
	JobTitle   pgtype.Text        `json:"job_title"`
	IsDeleted  pgtype.Bool        `json:"is_deleted"`
	CreateDate pgtype.Timestamptz `json:"create_date"`
	UpdateDate pgtype.Timestamptz `json:"update_date"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Email,
		arg.JobTitle,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.JobTitle,
		&i.IsDeleted,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const userByIdDb = `-- name: UserByIdDb :one
SELECT id,
    first_name,
    last_name,
    full_name,
    email,
    job_title,
    is_deleted,
    create_date,
    update_date
FROM users
WHERE id = $1
`

type UserByIdDbRow struct {
	ID         uuid.UUID          `json:"id"`
	FirstName  string             `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	FullName   pgtype.Text        `json:"full_name"`
	Email      string             `json:"email"`
	JobTitle   pgtype.Text        `json:"job_title"`
	IsDeleted  pgtype.Bool        `json:"is_deleted"`
	CreateDate pgtype.Timestamptz `json:"create_date"`
	UpdateDate pgtype.Timestamptz `json:"update_date"`
}

func (q *Queries) UserByIdDb(ctx context.Context, id uuid.UUID) (UserByIdDbRow, error) {
	row := q.db.QueryRow(ctx, userByIdDb, id)
	var i UserByIdDbRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.JobTitle,
		&i.IsDeleted,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}
