// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tokens.sql

package databasesqlc

import (
	"context"

	"github.com/google/uuid"
)

const deleteRefreshTokenDb = `-- name: DeleteRefreshTokenDb :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteRefreshTokenDb(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenDb, id)
	return err
}

const getRefreshTokensDb = `-- name: GetRefreshTokensDb :many
SELECT id,
    user_id,
    token
FROM tokens
`

func (q *Queries) GetRefreshTokensDb(ctx context.Context) ([]Token, error) {
	rows, err := q.db.Query(ctx, getRefreshTokensDb)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Token{}
	for rows.Next() {
		var i Token
		if err := rows.Scan(&i.ID, &i.UserID, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isCreatedRefreshTokenDb = `-- name: IsCreatedRefreshTokenDb :one
SELECT token
FROM tokens
WHERE user_id = $1
`

func (q *Queries) IsCreatedRefreshTokenDb(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, isCreatedRefreshTokenDb, userID)
	var token string
	err := row.Scan(&token)
	return token, err
}

const saveRefreshToken = `-- name: SaveRefreshToken :one
INSERT INTO tokens (user_id, token)
VALUES($1, $2)
RETURNING id, user_id, token
`

type SaveRefreshTokenParams struct {
	UserID uuid.UUID `json:"user_id"`
	Token  string    `json:"token"`
}

func (q *Queries) SaveRefreshToken(ctx context.Context, arg SaveRefreshTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, saveRefreshToken, arg.UserID, arg.Token)
	var i Token
	err := row.Scan(&i.ID, &i.UserID, &i.Token)
	return i, err
}

const updateRefreshTokenDb = `-- name: UpdateRefreshTokenDb :exec
UPDATE tokens
SET token = $1
WHERE user_id = $2
RETURNING id, user_id, token
`

type UpdateRefreshTokenDbParams struct {
	Token  string    `json:"token"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateRefreshTokenDb(ctx context.Context, arg UpdateRefreshTokenDbParams) error {
	_, err := q.db.Exec(ctx, updateRefreshTokenDb, arg.Token, arg.UserID)
	return err
}
